@page "/"
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@using Microsoft.EntityFrameworkCore
@using UrlSamurai.Components.Cache
@using UrlSamurai.Data
@using UrlSamurai.Data.Entities

@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject RedisCacheService Redis

<div class="card" style="padding-right: 0; padding-left: 0;">
    <h5 class="card-header">URL Samurai ⚔️</h5>
    <div class="card-body">
        <EditForm Model="@Input" method="post" OnValidSubmit="HandleShortenUrl" FormName="shortenUrlForm">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="input-group mb-3">
                <InputText @bind-Value="Input.Url" class="form-control" placeholder="Enter your URL..." />
    
                <InputSelect @bind-Value="Input.ValidFor" class="form-select" style="max-width: 160px;">
                    <option value="180">6 months</option>
                    <option value="1">1 day</option>
                    <option value="3">3 days</option>
                    <option value="7">1 week</option>
                    <option value="14">2 weeks</option>
                    <option value="30">1 month</option>
                    <option value="120">4 months</option>
                </InputSelect>
            </div>
            
            <ValidationMessage For="() => Input.Url" class="text-danger" />

            <button type="submit" class="btn btn-primary w-100">Shorten URL</button>
        </EditForm>

        @if (SavedUrl != null)
        {
            <SuccessResult GeneratedUrl="SavedUrl" />
        }
    </div>
</div>

<div class="card mt-5" style="padding-right: 0; padding-left: 0;">
    <div class="card-header">What is it?</div>
    <div class="card-body">
        <h5 class="card-title">Simple, Fast, Free URL Shortener</h5>
        <p class="card-text d-flex flex-wrap gap-2">
            <a href="https://t.me/UrlShortenerNinjaBot" target="_blank" class="badge rounded-pill bg-primary p-2">
                Available as Telegram bot
            </a>
            <a href="https://github.com/denysovkos/shorten-url-alfred-workflow/releases/tag/v1.0" target="_blank" class="badge rounded-pill bg-info p-2">
                Alfred workflow
            </a>
            <a href="https://www.twik.cc/swagger/index.html" target="_blank" class="badge rounded-pill bg-success p-2">
                Free API
            </a>
        </p>
        
        <p class="card-text">
            This is a minimalistic, privacy-friendly URL shortener. Just paste a long link and get a short one instantly – no ads, no tracking (except if you would like so).
        </p>
        <p class="card-text">
            It's ideal for quick sharing, messaging, or QR code generation. All links are automatically shortened and stored with unique short IDs.
        </p>
        <hr />
        <h6>Disclaimer</h6>
        <p class="text-muted small">
            This is a personal project provided as-is. I take no responsibility for the content of shortened URLs, their validity, or any third-party misuse. Use at your own risk.
        </p>
        <h6>FAQ</h6>
        <ul class="small">
            <li><strong>Do you log or track anything?</strong> No. I don’t store user data or usage metrics (except if you would like to register and use statistics as a feature).</li>
            <li><strong>Are links permanent?</strong> Currently, no - valid only for 180 days.</li>
            <li><strong>Can I report malicious content?</strong> Not yet, but you can contact me via the site footer if needed.</li>
            <li><strong>Is it open source?</strong> Not yet public, but will be in the future.</li>
        </ul>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private Urls? SavedUrl;

    public async Task HandleShortenUrl()
    {
        Console.WriteLine($"Submitted Input: {Input.Url}");

        string? ownerId = null;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            ownerId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        }

        var newUrl = new Urls
        {
            UrlValue = Input.Url,
            CreatedAt = DateTime.UtcNow,
            OwnerId = ownerId,
            ValidTill = GetExpirationDate(Input.ValidFor)
        };

        await DbContext.Urls.AddAsync(newUrl);
        await DbContext.SaveChangesAsync();
        await Redis.SetAsync(newUrl.ShortId!, newUrl.UrlValue, TimeSpan.FromDays(Input.ValidFor));

        SavedUrl = await DbContext.Urls.FirstOrDefaultAsync(u => u.Id == newUrl.Id);

        Input = new InputModel(); // Clear form
    }
    
    public DateTime GetExpirationDate(int validForDays)
    {
        return DateTime.UtcNow.AddDays(validForDays);
    }

    public sealed class InputModel
    {
        [Required(ErrorMessage = "URL is required")]
        [CustomValidation(typeof(InputModel), nameof(ValidateUrl))]
        public string Url { get; set; } = string.Empty;
        
        public int ValidFor { get; set; } = 180; // default to 6 months

        private static readonly Regex UrlRegex = new(@"^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$", RegexOptions.Compiled);

        public static ValidationResult? ValidateUrl(object? value, ValidationContext _)
        {
            var url = value as string;
            if (string.IsNullOrWhiteSpace(url))
                return new ValidationResult("URL is required");

            if (!UrlRegex.IsMatch(url))
                return new ValidationResult("Enter a valid, complete URL (e.g., https://example.com)");

            return ValidationResult.Success;
        }

    }

}
