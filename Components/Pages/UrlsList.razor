@page "/urls"
@rendermode InteractiveServer

@using Microsoft.EntityFrameworkCore
@using UrlSamurai.Data
@using System.Globalization
@using System.Text.Encodings.Web
@using UrlSamurai.Components.Services

@attribute [StreamRendering]

@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Your URLs</h3>

@if (_urlsList == null)
{
    <p><em>Loading...</em></p>
}
else if (_urlsList.Length == 0)
{
    <p><em>No URLs found.</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th>Id</th>
                <th>Original URL</th>
                <th>Shortened URL</th>
                <th>Created At</th>
                <th>Visit Count</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var url in _urlsList)
            {
                var isExpandable = url.VisitCount > 0;
                var rowId = $"expand-{url.ShortId}";

                <tr>
                    <td>
                        @if (isExpandable)
                        {
                            <button class="btn btn-sm btn-link"
                                    data-bs-toggle="collapse"
                                    data-bs-target=@($"#{rowId}")
                                    aria-expanded="false"
                                    aria-controls=@rowId
                                    @onclick="() => LoadStats(url.ShortId)">
                                <i class="bi bi-chevron-down"></i>
                            </button>
                        }
                    </td>
                    <td>@url.ShortId</td>
                    <td>@url.UrlValue</td>
                    <td>
                        <button class="btn btn-sm btn-outline-secondary"
                                onclick="navigator.clipboard.writeText('@ParseUrl(url.ShortId)')">
                            Copy
                        </button>
                    </td>
                    <td>@url.CreatedAt.ToString("yyyy-MM-dd HH:mm", CultureInfo.InvariantCulture)</td>
                    <td>@url.VisitCount</td>
                </tr>

                @if (isExpandable)
                {
                    <tr class="collapse" id="@rowId">
                        <td colspan="6">
                            <div class="p-3 bg-light rounded border">
                                <strong>Stats:</strong>
                                @if (_statsByShortId.TryGetValue(url.ShortId, out var stats))
                                {
                                    <ul class="mb-1">
                                        @foreach (var stat in stats)
                                        {
                                            var code = stat.Key;
                                            var display = CountryFlagService.GetDisplayName(code);
                                            <li>@display – @stat.Value</li>
                                        }
                                    </ul>
                                }
                                else
                                {
                                    <p><em>Loading stats...</em></p>
                                }
                                <span class="badge bg-secondary" data-bs-toggle="popover" data-bs-content="In development">Operating Systems</span>
                                <span class="badge bg-secondary ms-2" data-bs-toggle="popover" data-bs-content="In development">Devices</span>
                            </div>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>

    <div class="d-flex justify-content-between align-items-center mt-3">
        <button class="btn btn-outline-primary" @onclick="PreviousPage" disabled="@(_currentPage == 1)">← Previous</button>
        <span>Page @_currentPage of @_totalPages</span>
        <button class="btn btn-outline-primary" @onclick="NextPage" disabled="@(_currentPage == _totalPages)">Next →</button>
    </div>
}

@code {
    private UrlWithCount[]? _urlsList;
    private int _currentPage = 1;
    private const int PageSize = 10;
    private int _totalPages = 1;

    private sealed class UrlWithCount
    {
        public string ShortId { get; set; } = string.Empty;
        public string UrlValue { get; set; } = string.Empty;
        public DateTime CreatedAt { get; set; }
        public int VisitCount { get; set; }
    }

    private readonly Dictionary<string, Dictionary<string, int>> _statsByShortId = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadPage();
    }

    private async Task LoadPage()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated != true)
        {
            _urlsList = [];
            return;
        }

        var ownerId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        var totalCount = await DbContext.Urls.CountAsync(u => u.OwnerId == ownerId);
        _totalPages = (int)Math.Ceiling(totalCount / (double)PageSize);

        _urlsList = await (
            from url in DbContext.Urls
            where url.OwnerId == ownerId
            join visit in DbContext.UrlVisit on url.ShortId equals visit.ShortId into visitGroup
            orderby url.Id descending
            select new UrlWithCount
            {
                ShortId = url.ShortId,
                UrlValue = url.UrlValue,
                CreatedAt = url.CreatedAt,
                VisitCount = visitGroup.Count()
            }
        )
        .Skip((_currentPage - 1) * PageSize)
        .Take(PageSize)
        .ToArrayAsync();
    }

    private async Task LoadStats(string shortId)
    {
        var grouped = await DbContext.UrlVisit
            .Where(v => v.ShortId == shortId)
            .GroupBy(v => string.IsNullOrWhiteSpace(v.Country) ? "OTHER" : v.Country.ToUpper())
            .Select(g => new { CountryCode = g.Key, Count = g.Count() })
            .OrderByDescending(g => g.Count)
            .ToDictionaryAsync(g => g.CountryCode, g => g.Count);

        _statsByShortId[shortId] = grouped;
    }

    private async Task NextPage()
    {
        if (_currentPage < _totalPages)
        {
            _currentPage++;
            await LoadPage();
        }
    }

    private async Task PreviousPage()
    {
        if (_currentPage > 1)
        {
            _currentPage--;
            await LoadPage();
        }
    }

    private string ParseUrl(string shortId)
    {
        return $"https://www.twik.cc/u/{UrlEncoder.Default.Encode(shortId)}";
    }
}
